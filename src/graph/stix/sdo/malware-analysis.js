function createMalwareAnalysisForm(evt, title, stix={}) {
    const action = Object.keys(stix).length == 0 ? "add" : "edit";

    const type = "malware-analysis";
    const objectId = stix["id"] === undefined ? type+"--"+crypto.randomUUID() : stix["id"];

    const formHandler = new FormHandler(title, "img/malware-analysis-nb.png");
    submitEvent = evt => {
        var stix = {}
        const fields = formHandler.getFields();

        for (const [id, field] of Object.entries(fields)) {
            if (field.value === undefined || field.value === "" || field.value.length === 0) {
                continue;
            } else {
                stix[id] = field.value;
            }
        }

        if (action === "add") {
            Graph.getInstance().then( (graph) => {
                graph.addSTIXNode(
                    fields["id"].value,
                    type,
                    type,
                    stix);
            });
        } else {
            Graph.getInstance().then( (graph) => {
                graph.editSTIXNode(
                    fields["id"].value,
                    type,
                    type,
                    stix);
            });
        }
    }
    formHandler.setSubmitEventListener(submitEvent);
    formHandler.addFormField("hidden", "Id", "id", objectId, true);
    formHandler.addFormField("hidden", "Type", "type", type, true);
    formHandler.addFormField("text", "Product", "product", stix["product"] || "anonymized", true);
    formHandler.addFormField("text", "Version", "version", stix["version"]);
    formHandler.addMultipleInputField("Modules", "modules", [], false, stix["modules"]);

    formHandler.addFormField("datetime-local", "Submission Date", "submitted", stix["submitted"]);
    formHandler.addFormField("datetime-local", "Analysis Start Date", "analysis_started", stix["analysis_started"]);
    formHandler.addFormField("datetime-local", "Analysis End Date", "analysis_ended", stix["analysis_ended"]);
    formHandler.addFormField("select", "Result", "result", stix["result"], false, vocabularies["malware-result-ov"]);


    document.querySelector("form #analysis_started").addEventListener("change", evt => {
        document.querySelector("form #analysis_ended").min = evt.target.value;
    });
    document.querySelector("form #analysis_ended").addEventListener("change", evt => {
        document.querySelector("form #analysis_started").max = evt.target.value;
    });

}

