function createMalwareForm(evt, title, stix={}) {
    const action = Object.keys(stix).length == 0 ? "add" : "edit";

    const type = "malware";
    const objectId = stix["id"] === undefined ? type+"--"+crypto.randomUUID() : stix["id"];

    Graph.getInstance().then( (graph) => {
        const nodes = graph.getNodes();
        var targetSoftwareNodes = {};
        for (node of nodes) {
            if (node.stix["type"] === "software") {
                targetSoftwareNodes[node.label] = node.stix["id"];
            }
        }

        const formHandler = new FormHandler(title, "img/malware-nb.png");
        submitEvent = evt => {
            var stix = {}
            const fields = formHandler.getFields();

            for (const [id, field] of Object.entries(fields)) {
                if (field.value === undefined || field.value === "" || field.value.length === 0) {
                    continue;
                } else {
                    stix[id] = field.value;
                }
            }

            if (action==="add") {
                Graph.getInstance().then( (graph) => {
                    graph.addSTIXNode(
                        fields["id"].value,
                        fields["name"].value,
                        type,
                        stix);
                });
            } else {
                Graph.getInstance().then( (graph) => {
                    graph.editSTIXNode(
                        fields["id"].value,
                        fields["name"].value,
                        type,
                        stix);
                });
            }
        }
        formHandler.setSubmitEventListener(submitEvent);
        formHandler.addFormField("hidden", "Id", "id", objectId, true);
        formHandler.addFormField("hidden", "Type", "type", type, true);
        formHandler.addFormField("text", "Name", "name", stix["name"], true);
        formHandler.addFormField("textarea", "Description", "description", stix["description"]);
        formHandler.addMultipleInputField("Malware Types", "malware_types", vocabularies["malware-type-ov"], false, stix["malware_types"]);
        formHandler.addFormField("select", "Family", "is_family", stix["is_family"], false, ["Yes", "No"]);
        formHandler.addMultipleInputField("Aliases", "aliases", stix["aliases"]);
        formHandler.addSubForm("kill_chain_phases", createKillChainForm);
        if (Object.keys(stix).includes("kill_chain_phases")) {
            for (let killChainEntry of stix["kill_chain_phases"]) {
                FormHandler.addSubFormEntry("kill_chain_phases", killChainEntry["phase_name"], JSON.stringify(killChainEntry));
            }
        }

        formHandler.addFormField("datetime-local", "First Seen", "first_seen", stix["first_seen"]);
        formHandler.addFormField("datetime-local", "Last Seen", "last_seen", stix["last_seen"]);
        formHandler.addMultipleInputField("Operating System", "operating_system_refs", Object.keys(targetSoftwareNodes), false, stix["operating_system_refs"]);
        if (Object.keys(targetSoftwareNodes).length === 0) {
            document.querySelector("form #operating_system_refs input").setAttribute("disabled", true);
            document.querySelector("form #operating_system_refs input").setAttribute("title", "There are no Software in the graph.");
        }
        formHandler.addMultipleInputField("Architecture Execution Envs", "architecture_execution_envs", vocabularies["processor-architecture-ov"], false, stix["architecture_execution_envs"]);
        formHandler.addMultipleInputField("Implementation Languages", "implementation_languages", vocabularies["implementation-language-ov"], false, stix["implementation-languages"]);
        formHandler.addMultipleInputField("capabilities", "capabilities", vocabularies["malware-capablities-ov"], false, stix["capabilities"]);

        document.querySelector("form #first_seen").addEventListener("change", evt => {
            document.querySelector("form #last_seen").min = evt.target.value;
        });
        document.querySelector("form #last_seen").addEventListener("change", evt => {
            document.querySelector("form #first_seen").max = evt.target.value;
        });
    });

}

